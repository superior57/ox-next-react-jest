/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/ws-ticket': {
    /** Returns an one-time access tiket.. */
    get: operations['ws-ticket']
  }
  '/health': {
    /** Health check endpoint to return service health status. */
    get: operations['healthcheck']
  }
  '/events': {
    /** AI events endpoint to return a list of AI event entities filtered by query parameters. */
    get: operations['getEvents']
  }
  '/vital-signs': {
    /** Vital signs endpoint to return a list of vital sign entities filtered by query parameters. */
    get: operations['getVitalSigns']
  }
  '/actions': {
    /** Actions endpoint to return a list of action entities filtered by query parameters. */
    get: operations['getActions']
    /** Actions endpoint to create a new action entity with provided action data. */
    post: operations['createAction']
  }
  '/actions/{id}': {
    /** Actions endpoint to return an existing action entity with the given ID. */
    get: operations['getAction']
    /** Actions endpoint to update the action entity field by the provided parameter to be updated. */
    put: operations['updateAction']
  }
  '/action-configs': {
    /** Action configs endpoint to return a list of action config entities filtered by query parameters. */
    get: operations['getActionConfigs']
    /** Action configs endpoint to create a new action config entity with provided action config data. */
    post: operations['createActionConfig']
  }
  '/action-configs/{id}': {
    /** Action configs endpoint to update the action config entity field by the provided parameter to be updated. */
    put: operations['updateActionConfig']
  }
  '/action-associations': {
    /** Action associations endpoint to bind an action to an alert. */
    post: operations['updateActionAssociation']
  }
  '/action-associations/{id}': {
    /** Action associations endpoint to return an existing action association entity with the given ID. */
    get: operations['getActionAssociation']
    /** Action associations endpoint to delete an existing action association entity with the given ID. */
    delete: operations['deleteActionAssociation']
  }
  '/reports': {
    /** Reports endpoint to return a list of report entities filtered by query parameters. */
    get: operations['getReports']
    /** Reports endpoint to create a new report entity with provided report data. */
    post: operations['createReport']
  }
  '/reports/{id}': {
    /** Reports endpoint to update the report entity field by the provided parameter to be updated. */
    put: operations['updateReport']
  }
  '/report-configs': {
    /** Report configs endpoint to return a list of report config entities filtered by query parameters. */
    get: operations['getReportConfigs']
    /** Report configs endpoint to create a new report config entity with provided report config data. */
    post: operations['createReportConfig']
  }
  '/report-configs/{id}': {
    /** Report configs endpoint to update the report config entity field by the provided parameter to be updated. */
    put: operations['updateReportConfig']
  }
  '/customer-accounts': {
    /** Customer accounts endpoint to return a list of customer account entities filtered by query parameters. */
    get: operations['getCustomerAccounts']
    /** Customer accounts endpoint to create a new customer account entity with provided customer account metadata. */
    post: operations['createCustomerAccount']
  }
  '/customer-accounts/{id}': {
    /** Customer accounts endpoint to return an existing customer account entity with the given ID. */
    get: operations['getCustomerAccount']
    /** Customer accounts endpoint to update customer account entity field by the provided parameter to be updated. */
    put: operations['updateCustomerAccount']
    /** Customer accounts endpoint to delete an existing customer account entity with the given ID. */
    delete: operations['deleteCustomerAccount']
  }
  '/medical-providers': {
    /** Medical providers endpoint to return a list of medical providers filtered by query parameters. */
    get: operations['getMedicalProviders']
    /** Medical providers endpoint to create a medical provider entity with provided metadata. */
    post: operations['createMedicalProvider']
  }
  '/medical-providers/{id}': {
    /** Medical providers endpoint to return an existing medical provider entity with the given ID. */
    get: operations['getMedicalProvider']
    /** Medical providers endpoint to update medical provider entity field by the provided parameter to be updated. */
    put: operations['updateMedicalProvider']
    /** Medical providers endpoint to delete an existing medical provider entity with the given ID. */
    delete: operations['deleteMedicalProvider']
  }
  '/patients': {
    /** Patients endpoint to return a list of patients filtered by query parameters. */
    get: operations['getPatients']
    /** Patients endpoint to create a patient entity with provided patient metadata. */
    post: operations['createPatient']
  }
  '/patients/bulk': {
    /** Patients endpoint to create a list of patient entities with provided patients metadata. */
    post: operations['createPatients']
  }
  '/patients/{id}': {
    /** Patients endpoint to return an existing patient entity with the given ID. */
    get: operations['getPatient']
    /** Patients endpoint to update patient entity field by the provided parameter to be updated. */
    put: operations['updatePatient']
    /** Patients endpoint to delete an existing patient entity with the given ID. */
    delete: operations['deletePatient']
  }
  '/patient-annotations': {
    /** Patient annotations endpoint to return a list of patient annotations filtered by query parameters. Returned annotations will be sorted by creation time in a desc order by default. */
    get: operations['getPatientAnnotations']
    /** Patient annotations endpoint to create a new patient annotation entity. */
    post: operations['createPatientAnnotation']
  }
  '/patient-bed-associations': {
    /** Patient-bed associations endpoint to update an existing patient entity to bed entity binding. */
    put: operations['updatePatientBedAssociation']
    /** Patient-bed associations endpoint to create a new patient entity to bed entity binding. */
    post: operations['createPatientBedAssociation']
  }
  '/patient-bed-associations/{id}': {
    /** Patient-bed associations endpoint to return an existing patient-bed association entity with the given ID. */
    get: operations['getPatientBedAssociation']
    /** Patient-bed associations endpoint to delete an existing patient association entity with the given ID. */
    delete: operations['deletePatientBedAssociation']
  }
  '/devices': {
    /** Devices endpoint to return a list of device entities filtered by query parameters. */
    get: operations['getDevices']
  }
  '/devices/{id}': {
    /** Devices endpoint to return an existing device entity with the given device ID. */
    get: operations['getDevice']
  }
  '/device-associations/{id}': {
    /** Device associations endpoint to return an existing device association entity with the given ID. */
    get: operations['getDeviceAssociation']
  }
  '/alert-configs': {
    /** Alert configs endpoint to return a list of alert config entities filtered by query parameters. */
    get: operations['getAlertConfigs']
    /** Alert configs endpoint to create a new alert config entity with provided alert config metadata. */
    post: operations['createAlertConfig']
  }
  '/alert-configs/{id}': {
    /** Alert configs endpoint to return an existing alert config entity with the given ID. */
    get: operations['getAlertConfig']
    /** Alert configs endpoint to update alert config entity field by the provided parameter to be updated. */
    put: operations['updateAlertConfig']
    /** Alert configs endpoint to delete an existing alert config entity with the given ID. */
    delete: operations['deleteAlertConfig']
  }
  '/alerts': {
    /** Alerts endpoint to return a list of alert entities filtered by query parameters. */
    get: operations['getAlerts']
    /** Alerts endpoint to create a new alert entity with provided alert metadata. */
    post: operations['createAlert']
  }
  '/alerts/{id}': {
    /** Alerts endpoint to return an existing alert entity with the given ID. */
    get: operations['getAlert']
    /** Alerts endpoint to update alert status. */
    put: operations['updateAlertStatus']
    /** Alerts endpoint to delete an existing alert entity with the given ID. */
    delete: operations['deleteAlert']
  }
  '/alert-annotations': {
    /** Alert annotations endpoint to return a list of alert annotation entities filtered by query parameters. */
    get: operations['getAlertAnnotations']
    /** Alert annotations endpoint to create a new alert annotation entity with provided alert annotation metadata. */
    post: operations['createAlertAnnotation']
  }
  '/alert-annotations/{id}': {
    /** Alert annotations endpoint to return an existing alert annotation entity with the given ID. */
    get: operations['getAlertAnnotation']
    /** Alert annotations endpoint to update alert annotation entity field by the provided parameter to be updated. */
    put: operations['updateAlertAnnotation']
    /** Alert annotations endpoint to delete an existing alert annotation entity with the given ID. */
    delete: operations['deleteAlertAnnotation']
  }
  '/technicians': {
    /** Technician endpoint to return a list of technician entities filtered by query parameters. */
    get: operations['getTechnicians']
    /** Technicians endpoint to create a technician entity with provided technician metadata. */
    post: operations['createTechnician']
  }
  '/technicians/{id}': {
    /** Technicians endpoint to return an existing technician entity with the given ID. */
    get: operations['getTechnician']
    /** Technicians endpoint to update technician entity field by the provided parameter to be updated. */
    put: operations['updateTechnician']
    /** Technicians endpoint to delete an existing technician entity with the given ID. */
    delete: operations['deleteTechnician']
  }
  '/assets': {
    /** Assets endpoint to return a list of asset entities filtered by query parameters. */
    get: operations['getAssets']
  }
  '/assets/{type}/{id}': {
    /** Assets endpoint to return an existing asset entity with the given asset type and asset ID. */
    get: operations['getAsset']
  }
  '/beds': {
    /** Beds endpoint to return a list of bed entities filtered by query parameters. */
    get: operations['getBeds']
  }
  '/units': {
    /** Units endpoint to return a list of unit entities filtered by query parameters. */
    get: operations['getUnits']
    /** Units endpoint to create a unit entity with provided unit metadata. */
    post: operations['createUnit']
  }
  '/units/{id}': {
    /** Units endpoint to return an existing unit entity with the given unit ID. */
    get: operations['getUnit']
    /** Units endpoint to update unit entity field by the provided parameter to be updated. */
    put: operations['updateUnit']
    /** Units endpoint to delete an existing unit entity with the given unit ID. */
    delete: operations['deleteUnit']
  }
  '/unit-bed-associations': {
    /** Unit-bed associations endpoint to create new bed entity to unit entity bindinga. */
    post: operations['createUnitBedAssociations']
  }
  '/unit-bed-associations/{unitId}': {
    /** Unit-bed associations endpoint to return unit-bed association entities with the given unit ID. */
    get: operations['getUnitBedAssociations']
    /** Unit-bed associations endpoint to update bed entities to unit entity bindinga. */
    put: operations['updateUnitBedAssociations']
  }
  '/unit-bed-associations/{bedId}': {
    /** Unit-bed associations endpoint to delete an existing bed association entity with the given bedID. */
    delete: operations['deleteUnitBedAssociation']
  }
  '/patient-assignments': {
    /** Patient assignments endpoint to update an existing patient assignment. */
    put: operations['updatePatientAssignment']
    /** Patient assignments endpoint to create a new patient assignment. */
    post: operations['createPatientAssignment']
  }
  '/patient-assignments/{id}': {
    /** Patient assignments endpoint to return an existing patient assignment entity with the given ID. */
    get: operations['getPatientAssignment']
    /** Patient assignments endpoint to delete an existing patient assignment entity with the given ID. */
    delete: operations['deletePatientAssignment']
  }
}

export interface definitions {
  Event: {
    id?: string
    patientId?: string
    eventType?: string
    data?: { [key: string]: any }
  }
  ArrayOfEvents: definitions['Event'][]
  VitalSign: {
    unit?: string
    value?: number
    status?: string
    patientId?: string
  }
  ArrayOfVitalSigns: definitions['VitalSign'][]
  Action: {
    id?: number
    patientId?: string
    medicalProviderId?: number
    actionType?: string
    detail?: { [key: string]: any }
  }
  ArrayOfActions: definitions['Action'][]
  ActionConfig: {
    id?: number
    type?: string
    config?: {
      checklist?: string[]
    }
  }
  ArrayOfActionConfigs: definitions['ActionConfig'][]
  ActionAssociation: {
    id?: number
    alertId?: number
    actionId?: number
  }
  ArrayOfActionAssociations: definitions['ActionAssociation'][]
  Report: {
    id?: number
    patientId?: string
    reportType?: string
    data?: { [key: string]: string }
  }
  ArrayOfReports: definitions['Report'][]
  ReportConfig: {
    id?: number
    type?: string
    config?: string[]
  }
  ArrayOfReportConfigs: definitions['ReportConfig'][]
  CustomerAccount: {
    id?: number
    name?: string
  }
  ArrayOfCustomerAccounts: definitions['CustomerAccount'][]
  MedicalProvider: {
    id?: number
    name?: string
    providerType?: string
    specialty?: string
    customerAccountId?: number
  }
  ArrayOfMedicalProviders: definitions['MedicalProvider'][]
  HealthSummary: {
    baseline?: string
    baselineUpdatedAt?: number
    primaryDoctor?: string
    primaryNurse?: string
    primaryCondition?: string
    otherConditions?: string[]
  }
  Tag: {
    key?: string
    value?: string
  }
  Patient: {
    id?: number
    patientId?: string
    firstName?: string
    lastName?: string
    sex?: string
    age?: number
    /** yyyy/MM/dd */
    dateOfBirth?: string
    phoneNumber?: string
    healthSummary?: definitions['HealthSummary']
    tags?: definitions['Tag'][]
    customerAccountId?: number
    unitId?: string
    roomId?: string
    bedId?: string
  }
  ArrayOfPatients: definitions['Patient'][]
  PatientAnnotation: {
    id?: number
    patientId?: string
    annotator?: string
    annotation?: string
    createdAt?: number
  }
  ArrayOfPatientAnnotations: definitions['PatientAnnotation'][]
  PatientBedAssociation: {
    id?: number
    patientId?: string
    bedId?: string
  }
  ArrayOfPatientBedAssociations: definitions['PatientBedAssociation'][]
  PatientAssignment: {
    id?: number
    patientId?: string
    medicalProviderIds?: number[]
  }
  ArrayOfPatientAssignment: definitions['PatientAssignment'][]
  Device: {
    id?: number
    deviceId?: string
    serialNumber?: string
    keyId?: number
    status?: string
  }
  ArrayOfDevices: definitions['Device'][]
  DeviceAssociation: {
    id?: number
    deviceId?: string
    bedId?: string
  }
  ArrayOfDeviceAssociations: definitions['DeviceAssociation'][]
  AlertConfig: {
    id?: number
    name?: string
    description?: string
    scope?: string
    ownerId?: string
    severity?: string
    groupName?: string
    enabled?: boolean
    configType?: string
    binaryConfig?: definitions['BinaryConfig']
    statisticsConfig?: definitions['StatisticsConfig']
    mitigationAction?: string
  }
  BinaryConfig: {
    eventType?: string
  }
  StatisticsConfig: {
    eventType?: string
    metricType?: string
    aggregationType?: string
    aggregationWindowSec?: number
    /** The minimum number of alarm events triggered in a timeframe. */
    incidentLimit?: number
    /** Use seconds as a unit. */
    timeFrame?: number
    operator?: string
    thresholdType?: string
    threshold?: number
  }
  ArrayOfAlertConfigs: definitions['AlertConfig'][]
  Alert: {
    id?: number
    deviceId?: string
    status?: string
    detail?: {
      duration?: number
      activity?: string
    }
    createdAt?: string
    updatedAt?: string
    patient?: definitions['Patient']
    alertConfig?: definitions['AlertConfig']
    lastAction?: definitions['Action']
  }
  ArrayOfAlerts: definitions['Alert'][]
  AlertAnnotation: {
    id?: number
    alertId?: number
    annotatorId?: number
    annotation?: string
  }
  ArrayOfAlertAnnotations: definitions['AlertAnnotation'][]
  Technician: {
    id?: number
    name?: string
    customerAccountId?: number
  }
  ArrayOfTechnicians: definitions['Technician'][]
  Asset: {
    assetId?: string
    assetName?: string
    assetType?: string
    deviceCount?: number
    parent?: definitions['Asset']
    children?: definitions['ArrayOfAssets']
    devices?: definitions['ArrayOfDevices']
  }
  ArrayOfAssets: definitions['Asset'][]
  Bed: {
    id?: number
    bedId?: string
    bedName?: string
    room?: definitions['Asset']
    patient?: definitions['Patient']
    devices?: definitions['Device'][]
    alert?: definitions['AlertMessage']
  }
  AlertMessage: {
    bedId?: string
    patientId?: string
    configId?: number
    event?: string
    severity?: string
    metric?: string
    duration?: number
    status?: number
  }
  ArrayOfBeds: definitions['Bed'][]
  Unit: {
    id?: number
    unitId?: string
    name?: string
    description?: string
    customerAccountId?: number
    summary?: {
      roomsTotal?: number
      bedsTotal?: number
      devicesTotal?: number
      devicesOnline?: number
    }
    details?: {
      beds?: definitions['ArrayOfBeds']
    }
  }
  ArrayOfUnits: definitions['Unit'][]
  UnitBedAssociation: {
    id?: number
    bedId?: string
    unitId?: string
  }
  ArrayOfUnitBedAssociations: definitions['UnitBedAssociation'][]
  Error: {
    code: number
    message: string
  }
  WsTicket: {
    value?: string
  }
}

export interface responses {
  /** Bad request */
  BadRequest: {
    schema: definitions['Error']
  }
  /** Not Found */
  NotFound: {
    schema: definitions['Error']
  }
  /** Unauthorized */
  Unauthorized: {
    schema: definitions['Error']
  }
  /** Forbidden */
  Forbidden: {
    schema: definitions['Error']
  }
  /** Internal Server Error */
  InternalServerError: {
    schema: definitions['Error']
  }
  /** Not Implemented */
  NotImplemented: {
    schema: definitions['Error']
  }
  /** Gateway Timeout */
  GatewayTimeout: {
    schema: definitions['Error']
  }
}

export interface operations {
  /** Returns an one-time access tiket.. */
  'ws-ticket': {
    parameters: {
      header: {
        /** request. */
        Authorization: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['WsTicket']
      }
    }
  }
  /** Health check endpoint to return service health status. */
  healthcheck: {
    responses: {
      /** OK */
      200: unknown
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** AI events endpoint to return a list of AI event entities filtered by query parameters. */
  getEvents: {
    parameters: {
      query: {
        /** The patientID. */
        'patient-id': string
        /** The AI event type:Coughing. */
        type: string
        /** The AI event aggregation type:count. */
        'aggregation-type': string
        /** The AI event aggregation window:hour/fiveMinutes. */
        'aggregation-window': string
        /** The begin timestamp of the AI event query window. */
        begin: number
        /** The end timestamp of the AI event query window. */
        end: number
        /** The flag to indicated if the response should only include AI event summary (aggregated stats). */
        'summary-only'?: boolean
        /** The maximum number of AI event entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of AI event entities filtered by query parameters. */
      200: {
        schema: {
          summary?: { [key: string]: number }
          events?: definitions['ArrayOfEvents']
        }
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Vital signs endpoint to return a list of vital sign entities filtered by query parameters. */
  getVitalSigns: {
    parameters: {
      query: {
        /** The patientID. */
        'patient-id': string
        /** The vital sign type:heartRate/breathRate */
        'metric-type': string
        /** The vital sign aggregation types:avg/min/max */
        'aggregation-types': string[]
        /** The vital sign aggregation window:hour/fiveMinutes */
        'aggregation-window': string
        /** The begin timestamp of the vital sign query window. */
        begin: number
        /** The end timestamp of the vital sign query window. */
        end: number
        /** The flag to indicated if the response should only include vital sign summary (aggregated stats). */
        'summary-only'?: boolean
        /** The maximum number of vital sign entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of vital sign entities filtered by query parameters. */
      200: {
        schema: {
          summary?: { [key: string]: { [key: string]: number } }
          vitalSigns?: definitions['ArrayOfVitalSigns']
        }
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Actions endpoint to return a list of action entities filtered by query parameters. */
  getActions: {
    parameters: {
      query: {
        /** The patientID. */
        'patient-id'?: string
        /** The alertID action entities associated with. */
        'alert-id'?: number
        /** The medical providerID action entities are associated with. */
        'medical-provider-id'?: number
        /** The action type. */
        type?: string
        /** The alert property by which to sort the results. */
        'sort-by'?: string
        /** The begin timestamp of the action query window. */
        begin?: number
        /** The end timestamp of the action query window. */
        end?: number
        /** The flag to indicated if the response should only include action summary (aggregated stats). */
        'summary-only'?: boolean
        /** The maximum number of action entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of action entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfActions']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Actions endpoint to create a new action entity with provided action data. */
  createAction: {
    parameters: {
      body: {
        /** The action entity to create. */
        action?: definitions['Action']
      }
    }
    responses: {
      /** Action entity created. */
      200: {
        schema: definitions['Action']
      }
      /** Action entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Actions endpoint to return an existing action entity with the given ID. */
  getAction: {
    parameters: {
      path: {
        /** The action ID. */
        id: number
      }
    }
    responses: {
      /** The existing action entity with the given ID. */
      200: {
        schema: definitions['Action']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Actions endpoint to update the action entity field by the provided parameter to be updated. */
  updateAction: {
    parameters: {
      path: {
        /** The action ID. */
        id: number
      }
      body: {
        /** The action entity to update. Only provide fields to update. */
        action?: definitions['Action']
      }
    }
    responses: {
      /** Action entity updated. */
      200: {
        schema: definitions['Action']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action configs endpoint to return a list of action config entities filtered by query parameters. */
  getActionConfigs: {
    parameters: {
      query: {
        /** The patient ID. */
        'patient-id'?: string
        /** The action config type. */
        type?: string
      }
    }
    responses: {
      /** A list of action config entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfActionConfigs']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action configs endpoint to create a new action config entity with provided action config data. */
  createActionConfig: {
    parameters: {
      body: {
        /** The action config entity to create. */
        'action-config'?: definitions['ActionConfig']
      }
    }
    responses: {
      /** Action config entity created. */
      200: {
        schema: definitions['ActionConfig']
      }
      /** Action config entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action configs endpoint to update the action config entity field by the provided parameter to be updated. */
  updateActionConfig: {
    parameters: {
      path: {
        /** The action config ID. */
        id: number
      }
      body: {
        /** The action config entity to update.Only provide fields to update. */
        'action-config'?: definitions['ActionConfig']
      }
    }
    responses: {
      /** Action config entity updated. */
      200: {
        schema: definitions['ActionConfig']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action associations endpoint to bind an action to an alert. */
  updateActionAssociation: {
    parameters: {
      body: {
        /** The action association entity to create. */
        'action-association'?: definitions['ActionAssociation']
      }
    }
    responses: {
      /** Action association entity created. */
      200: {
        schema: definitions['ActionAssociation']
      }
      /** Action association entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action associations endpoint to return an existing action association entity with the given ID. */
  getActionAssociation: {
    parameters: {
      path: {
        /** The action association ID. */
        id: number
      }
    }
    responses: {
      /** The existing action association entity with the given ID. */
      200: {
        schema: definitions['ActionAssociation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Action associations endpoint to delete an existing action association entity with the given ID. */
  deleteActionAssociation: {
    parameters: {
      path: {
        /** The action association ID. */
        id: number
      }
    }
    responses: {
      /** Action association entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Reports endpoint to return a list of report entities filtered by query parameters. */
  getReports: {
    parameters: {
      query: {
        /** The patient ID. */
        'patient-id'?: string
        /** The report type. */
        type?: string
        /** The maximum number of report entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of report entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfReports']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Reports endpoint to create a new report entity with provided report data. */
  createReport: {
    parameters: {
      body: {
        /** The report entity to create. */
        report?: definitions['Report']
      }
    }
    responses: {
      /** Report entity created. */
      200: {
        schema: definitions['Report']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Reports endpoint to update the report entity field by the provided parameter to be updated. */
  updateReport: {
    parameters: {
      path: {
        /** The report ID. */
        id: number
      }
      body: {
        /** The report entity to update. Only provide fields to update. */
        report?: definitions['Report']
      }
    }
    responses: {
      /** Report entity updated. */
      200: {
        schema: definitions['Report']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Report configs endpoint to return a list of report config entities filtered by query parameters. */
  getReportConfigs: {
    parameters: {
      query: {
        /** The patient ID. */
        'patient-id'?: string
        /** The report config type. */
        type?: string
      }
    }
    responses: {
      /** A list of report config entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfReportConfigs']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Report configs endpoint to create a new report config entity with provided report config data. */
  createReportConfig: {
    parameters: {
      body: {
        /** The report config entity to create. */
        'report-config'?: definitions['ReportConfig']
      }
    }
    responses: {
      /** Report entity config created. */
      200: {
        schema: definitions['ReportConfig']
      }
      /** Report config entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Report configs endpoint to update the report config entity field by the provided parameter to be updated. */
  updateReportConfig: {
    parameters: {
      path: {
        /** The report config ID. */
        id: number
      }
      body: {
        /** The report config entity to update. Only provide fields to update. */
        'report-config'?: definitions['ReportConfig']
      }
    }
    responses: {
      /** Report entity config updated. */
      200: {
        schema: definitions['ReportConfig']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Customer accounts endpoint to return a list of customer account entities filtered by query parameters. */
  getCustomerAccounts: {
    parameters: {
      query: {
        /** The customer account name. */
        name?: string
        /** The maximum number of customer account entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of customer account entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfCustomerAccounts']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Customer accounts endpoint to create a new customer account entity with provided customer account metadata. */
  createCustomerAccount: {
    parameters: {
      body: {
        /** The customer account entity to create. */
        'customer-account'?: definitions['CustomerAccount']
      }
    }
    responses: {
      /** Customer account entity created. */
      200: {
        schema: definitions['CustomerAccount']
      }
      /** customer account entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Customer accounts endpoint to return an existing customer account entity with the given ID. */
  getCustomerAccount: {
    parameters: {
      path: {
        /** The customer account ID. */
        id: number
      }
    }
    responses: {
      /** The existing customer account entity with the given ID. */
      200: {
        schema: definitions['CustomerAccount']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Customer accounts endpoint to update customer account entity field by the provided parameter to be updated. */
  updateCustomerAccount: {
    parameters: {
      path: {
        /** The customer account ID. */
        id: number
      }
      body: {
        /** The customer account entity to update. Only provide fields to update. */
        'customer-account'?: definitions['CustomerAccount']
      }
    }
    responses: {
      /** Customer account entity updated. */
      200: {
        schema: definitions['CustomerAccount']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Customer accounts endpoint to delete an existing customer account entity with the given ID. */
  deleteCustomerAccount: {
    parameters: {
      path: {
        /** The customer account ID. */
        id: number
      }
    }
    responses: {
      /** Customer account already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Medical providers endpoint to return a list of medical providers filtered by query parameters. */
  getMedicalProviders: {
    parameters: {
      query: {
        /** The medical provider name. */
        name?: string
        /** The customer account ID medical providers are associated with. */
        'customer-account-id'?: number
        /** The type of the medical provider. */
        'provider-type'?: string
        /** The patient ID medical provider is associated with. */
        'patient-id'?: string
        /** The maximum number of medical provider entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of medical providers filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfMedicalProviders']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Medical providers endpoint to create a medical provider entity with provided metadata. */
  createMedicalProvider: {
    parameters: {
      body: {
        /** The medical provider entity to create. */
        'medical-provider'?: definitions['MedicalProvider']
      }
    }
    responses: {
      /** Medical provider entity created. */
      200: {
        schema: definitions['MedicalProvider']
      }
      /** Medical provider entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Medical providers endpoint to return an existing medical provider entity with the given ID. */
  getMedicalProvider: {
    parameters: {
      path: {
        /** The medical provider ID. */
        id: number
      }
    }
    responses: {
      /** The existing medical provider entity with the given ID. */
      200: {
        schema: definitions['MedicalProvider']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Medical providers endpoint to update medical provider entity field by the provided parameter to be updated. */
  updateMedicalProvider: {
    parameters: {
      path: {
        /** The medical provider ID. */
        id: number
      }
      body: {
        /** The medical provider entity to update. Only provide fields to update. */
        'medical-provider'?: definitions['MedicalProvider']
      }
    }
    responses: {
      /** Medical provider entity updated. */
      200: {
        schema: definitions['MedicalProvider']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Medical providers endpoint to delete an existing medical provider entity with the given ID. */
  deleteMedicalProvider: {
    parameters: {
      path: {
        /** The medical provider ID. */
        id: number
      }
    }
    responses: {
      /** Medical provider entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to return a list of patients filtered by query parameters. */
  getPatients: {
    parameters: {
      query: {
        /** The patient first name. */
        'first-name'?: string
        /** The patient last name. */
        'last-name'?: string
        /** The customer account ID patients are associated with. */
        'customer-account-id'?: number
        /** The unit ID patients are associated with. */
        'unit-id'?: string
        /** The room ID patients are associated with. */
        'room-id'?: string
        /** The bed ID patient is associated with. */
        'bed-id'?: string
        /** The device ID patient is associated with. */
        'device-id'?: string
        /** The medical provider ID patients are associated with. */
        'medical-provider-id'?: number
        /** The maximum number of patient entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of patients filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfPatients']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to create a patient entity with provided patient metadata. */
  createPatient: {
    parameters: {
      body: {
        /** The patient entity to create. */
        patient?: definitions['Patient']
      }
    }
    responses: {
      /** Patient entity created. */
      200: {
        schema: definitions['Patient']
      }
      /** Patient entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to create a list of patient entities with provided patients metadata. */
  createPatients: {
    parameters: {
      body: {
        /** A list of patients to create. */
        patientList?: definitions['ArrayOfPatients']
      }
    }
    responses: {
      /** A list of patients created. */
      200: {
        schema: definitions['ArrayOfPatients']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to return an existing patient entity with the given ID. */
  getPatient: {
    parameters: {
      path: {
        /** The patient ID. */
        id: string
      }
    }
    responses: {
      /** The existing patient entity with the given ID. */
      200: {
        schema: definitions['Patient']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to update patient entity field by the provided parameter to be updated. */
  updatePatient: {
    parameters: {
      path: {
        /** The patient ID. */
        id: string
      }
      body: {
        /** The patient entity to update. Only provide fields to update. */
        patient?: definitions['Patient']
      }
    }
    responses: {
      /** Patient entity updated. */
      200: {
        schema: definitions['Patient']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patients endpoint to delete an existing patient entity with the given ID. */
  deletePatient: {
    parameters: {
      path: {
        /** The patient ID. */
        id: string
      }
    }
    responses: {
      /** Patient entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient annotations endpoint to return a list of patient annotations filtered by query parameters. Returned annotations will be sorted by creation time in a desc order by default. */
  getPatientAnnotations: {
    parameters: {
      query: {
        /** The patient ID annotations are associated with. */
        'patient-id'?: string
        /** The maximum number of patient annotation entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of patient annotations filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfPatientAnnotations']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient annotations endpoint to create a new patient annotation entity. */
  createPatientAnnotation: {
    parameters: {
      body: {
        /** The patient annotation entity to create. */
        'patient-annotation'?: definitions['PatientAnnotation']
      }
    }
    responses: {
      /** Patient annotation entity created. */
      200: {
        schema: definitions['PatientAnnotation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient-bed associations endpoint to update an existing patient entity to bed entity binding. */
  updatePatientBedAssociation: {
    parameters: {
      body: {
        /** The patient-bed association entity to update. */
        'patient-bed-association'?: definitions['PatientBedAssociation']
      }
    }
    responses: {
      /** Patient-bed association entity updated. */
      200: {
        schema: definitions['PatientBedAssociation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient-bed associations endpoint to create a new patient entity to bed entity binding. */
  createPatientBedAssociation: {
    parameters: {
      body: {
        /** The patient-bed association entity to create. */
        'patient-bed-association'?: definitions['PatientBedAssociation']
      }
    }
    responses: {
      /** Patient-bed association entity created. */
      200: {
        schema: definitions['PatientBedAssociation']
      }
      /** Patient-bed association entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient-bed associations endpoint to return an existing patient-bed association entity with the given ID. */
  getPatientBedAssociation: {
    parameters: {
      path: {
        /** The patient-bed association ID. */
        id: number
      }
    }
    responses: {
      /** The existing patient-bed association entity with the given ID. */
      200: {
        schema: definitions['PatientBedAssociation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient-bed associations endpoint to delete an existing patient association entity with the given ID. */
  deletePatientBedAssociation: {
    parameters: {
      path: {
        /** The patient-bed association ID. */
        id: number
      }
    }
    responses: {
      /** Patient-bed association entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Devices endpoint to return a list of device entities filtered by query parameters. */
  getDevices: {
    parameters: {
      query: {
        /** The customer account ID devices are associated with. */
        'customer-account-id'?: number
        /** The unit ID devices are associated with. */
        'unit-id'?: string
        /** The bed ID devices are associated with. */
        'bed-id'?: string
        /** The patient ID devices are associated with. */
        'patient-id'?: string
        /** The maximum number of device entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of device entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfDevices']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Devices endpoint to return an existing device entity with the given device ID. */
  getDevice: {
    parameters: {
      path: {
        /** The device ID. */
        id: string
      }
    }
    responses: {
      /** The existing device entity with the given device ID. */
      200: {
        schema: definitions['Device']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Device associations endpoint to return an existing device association entity with the given ID. */
  getDeviceAssociation: {
    parameters: {
      path: {
        /** The device association ID. */
        id: number
      }
    }
    responses: {
      /** The existing device association entity with the given ID. */
      200: {
        schema: definitions['DeviceAssociation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert configs endpoint to return a list of alert config entities filtered by query parameters. */
  getAlertConfigs: {
    parameters: {
      query: {
        /** The alert config name. */
        name?: string
        /** The alert config owner. */
        'owner-id'?: string
        /** The maximum number of alert configs should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of alert configs filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfAlertConfigs']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert configs endpoint to create a new alert config entity with provided alert config metadata. */
  createAlertConfig: {
    parameters: {
      body: {
        /** The alert config entity to create. */
        'alert-config'?: definitions['AlertConfig']
      }
    }
    responses: {
      /** Alert config entity created. */
      200: {
        schema: definitions['AlertConfig']
      }
      /** Alert config entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert configs endpoint to return an existing alert config entity with the given ID. */
  getAlertConfig: {
    parameters: {
      path: {
        /** The alert config ID. */
        id: number
      }
    }
    responses: {
      /** The existing alert config entity with the given ID. */
      200: {
        schema: definitions['AlertConfig']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert configs endpoint to update alert config entity field by the provided parameter to be updated. */
  updateAlertConfig: {
    parameters: {
      path: {
        /** The alert config ID. */
        id: number
      }
      body: {
        /** The alert config entity to update. Only provide fields to update. If binaryConfig and statisticsConfig need to be updated, all parameters inside must be set, and parameters that are not allowed to be updated are set to original values. */
        'alert-config'?: definitions['AlertConfig']
      }
    }
    responses: {
      /** Alert config entity updated. */
      200: {
        schema: definitions['AlertConfig']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert configs endpoint to delete an existing alert config entity with the given ID. */
  deleteAlertConfig: {
    parameters: {
      path: {
        /** The alert config ID. */
        id: number
      }
    }
    responses: {
      /** Alert config entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alerts endpoint to return a list of alert entities filtered by query parameters. */
  getAlerts: {
    parameters: {
      query: {
        /** The alert name. */
        name?: string
        /** The device ID alert entities are associated with. */
        'device-id'?: string
        /** The patient ID alert entities are associated with. */
        'patient-id'?: string
        /** The action ID the alert entity is associated with. */
        'action-id'?: number
        /** The alert config ID alert entities blong to. */
        'config-id'?: number
        /** The alert status list. */
        'status-list'?: string[]
        /** The begin timestamp of the alert query window. */
        begin?: number
        /** The end timestamp of the alert query window. */
        end?: number
        /** The alert property by which to sort the results. */
        'sort-by'?: string
        /** The maximum number of alerts should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of alert entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfAlerts']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alerts endpoint to create a new alert entity with provided alert metadata. */
  createAlert: {
    parameters: {
      body: {
        /** The alert entity to create. */
        alert?: definitions['Alert']
      }
    }
    responses: {
      /** Alert entity created. */
      200: {
        schema: definitions['Alert']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alerts endpoint to return an existing alert entity with the given ID. */
  getAlert: {
    parameters: {
      path: {
        /** The alert ID. */
        id: number
      }
    }
    responses: {
      /** The existing alert entity with the given ID. */
      200: {
        schema: definitions['Alert']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alerts endpoint to update alert status. */
  updateAlertStatus: {
    parameters: {
      path: {
        /** The alert ID. */
        id: number
      }
      query: {
        /** The alert status to update. */
        status?: string
      }
    }
    responses: {
      /** Alert entity updated. */
      200: {
        schema: definitions['Alert']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alerts endpoint to delete an existing alert entity with the given ID. */
  deleteAlert: {
    parameters: {
      path: {
        /** The alert ID. */
        id: number
      }
    }
    responses: {
      /** Alert entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert annotations endpoint to return a list of alert annotation entities filtered by query parameters. */
  getAlertAnnotations: {
    parameters: {
      query: {
        /** The alert ID alert annotation entities associated with. */
        'alert-id'?: number
        /** The annotator ID alert annotation entities associated with. */
        'annotator-id'?: number
        /** The maximum number of alert annotations should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of alert annotations filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfAlertAnnotations']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert annotations endpoint to create a new alert annotation entity with provided alert annotation metadata. */
  createAlertAnnotation: {
    parameters: {
      body: {
        /** The alert annotation entity to create. */
        'alert-annotation'?: definitions['AlertAnnotation']
      }
    }
    responses: {
      /** Alert annotation entity created. */
      200: {
        schema: definitions['AlertAnnotation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert annotations endpoint to return an existing alert annotation entity with the given ID. */
  getAlertAnnotation: {
    parameters: {
      path: {
        /** The alert annotation ID. */
        id: number
      }
    }
    responses: {
      /** The existing alert annotation entity with the given ID. */
      200: {
        schema: definitions['AlertAnnotation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert annotations endpoint to update alert annotation entity field by the provided parameter to be updated. */
  updateAlertAnnotation: {
    parameters: {
      path: {
        /** The alert annotation ID. */
        id: number
      }
      body: {
        /** The alert annotation entity to update. */
        'alert-annotation'?: definitions['AlertAnnotation']
      }
    }
    responses: {
      /** Alert annotation entity updated. Only provide fields to update. */
      200: {
        schema: definitions['AlertAnnotation']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Alert annotations endpoint to delete an existing alert annotation entity with the given ID. */
  deleteAlertAnnotation: {
    parameters: {
      path: {
        /** The alert annotation ID. */
        id: number
      }
    }
    responses: {
      /** Alert annotation entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Technician endpoint to return a list of technician entities filtered by query parameters. */
  getTechnicians: {
    parameters: {
      query: {
        /** The technician name. */
        name?: string
        /** The customer account ID technician entities are associated with. */
        'customer-account-id'?: number
        /** The maximum number of technician entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of technician entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfTechnicians']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Technicians endpoint to create a technician entity with provided technician metadata. */
  createTechnician: {
    parameters: {
      body: {
        /** The technician entity to create. */
        technician?: definitions['Technician']
      }
    }
    responses: {
      /** Technician entity created. */
      200: {
        schema: definitions['Technician']
      }
      /** Technician entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Technicians endpoint to return an existing technician entity with the given ID. */
  getTechnician: {
    parameters: {
      path: {
        /** The technician ID. */
        id: number
      }
    }
    responses: {
      /** The existing technician entity with the given ID. */
      200: {
        schema: definitions['Technician']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Technicians endpoint to update technician entity field by the provided parameter to be updated. */
  updateTechnician: {
    parameters: {
      path: {
        /** The technician ID. */
        id: number
      }
      body: {
        /** The technician entity to update. Only provide fields to update. */
        technician?: definitions['Technician']
      }
    }
    responses: {
      /** Technician entity updated. */
      200: {
        schema: definitions['Technician']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Technicians endpoint to delete an existing technician entity with the given ID. */
  deleteTechnician: {
    parameters: {
      path: {
        /** The technician ID. */
        id: number
      }
    }
    responses: {
      /** Technician entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Assets endpoint to return a list of asset entities filtered by query parameters. */
  getAssets: {
    parameters: {
      query: {
        /** The asset name. */
        'asset-name'?: string
        /** The asset type. */
        'asset-type'?: string
        /** The unit ID asset entities are associated with. */
        'unit-id'?: string
        /** The maximum number of asset entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of asset entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfAssets']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Assets endpoint to return an existing asset entity with the given asset type and asset ID. */
  getAsset: {
    parameters: {
      path: {
        /** The asset type. */
        type: string
        /** The asset ID. */
        id: string
      }
      query: {
        /** extract the sub asset tree. */
        expand?: boolean
      }
    }
    responses: {
      /** The existing asset entity with the given asset type and asset ID. */
      200: {
        schema: definitions['Asset']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Beds endpoint to return a list of bed entities filtered by query parameters. */
  getBeds: {
    parameters: {
      query: {
        /** The unit ID bed entities are associated with. */
        'unit-id'?: string
        /** The asset ID bed entities are associated with. */
        'asset-id'?: string
        /** Whether to return the available beds only. */
        'available-only'?: boolean
        /** The maximum number of bed entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of bed entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfBeds']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Units endpoint to return a list of unit entities filtered by query parameters. */
  getUnits: {
    parameters: {
      query: {
        /** The unit name. */
        name?: string
        /** The customer account ID units are associated with. */
        'customer-account-id'?: number
        /** The maximum number of unit entities should be returned. */
        count?: number
      }
    }
    responses: {
      /** A list of unit entities filtered by query parameters. */
      200: {
        schema: definitions['ArrayOfUnits']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Units endpoint to create a unit entity with provided unit metadata. */
  createUnit: {
    parameters: {
      body: {
        /** The unit entity to create. */
        unit?: definitions['Unit']
      }
    }
    responses: {
      /** Unit entity created. */
      200: {
        schema: definitions['Unit']
      }
      /** Unit entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Units endpoint to return an existing unit entity with the given unit ID. */
  getUnit: {
    parameters: {
      path: {
        /** The unit ID. */
        id: string
      }
    }
    responses: {
      /** The existing unit entity with the given unit ID. */
      200: {
        schema: definitions['Unit']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Units endpoint to update unit entity field by the provided parameter to be updated. */
  updateUnit: {
    parameters: {
      path: {
        /** The unit ID. */
        id: string
      }
      body: {
        /** The unit entity to update. Only provided fields to update. */
        unit?: definitions['Unit']
      }
    }
    responses: {
      /** Unit entity updated. */
      200: {
        schema: definitions['Unit']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Units endpoint to delete an existing unit entity with the given unit ID. */
  deleteUnit: {
    parameters: {
      path: {
        /** The unit ID. */
        id: string
      }
    }
    responses: {
      /** Unit entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Unit-bed associations endpoint to create new bed entity to unit entity bindinga. */
  createUnitBedAssociations: {
    parameters: {
      body: {
        /** The unit-bed association entities to create. */
        'unit-bed-associations'?: definitions['ArrayOfUnitBedAssociations']
      }
    }
    responses: {
      /** Unit-Bed associations entities created. */
      200: {
        schema: definitions['ArrayOfUnitBedAssociations']
      }
      /** Unit-Bed association entities already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Unit-bed associations endpoint to return unit-bed association entities with the given unit ID. */
  getUnitBedAssociations: {
    parameters: {
      path: {
        /** The unit ID. */
        unitId: string
      }
    }
    responses: {
      /** The existing unit-Bed associations entity with the given unit ID. */
      200: {
        schema: definitions['ArrayOfUnitBedAssociations']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Unit-bed associations endpoint to update bed entities to unit entity bindinga. */
  updateUnitBedAssociations: {
    parameters: {
      path: {
        /** The unit ID. */
        unitId: string
      }
      body: {
        /** The bed IDs to update. */
        bedIds?: string[]
      }
    }
    responses: {
      /** The bed IDs update completed. */
      200: {
        schema: definitions['ArrayOfUnitBedAssociations']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Unit-bed associations endpoint to delete an existing bed association entity with the given bedID. */
  deleteUnitBedAssociation: {
    parameters: {
      path: {
        /** The bed ID. */
        bedId: string
      }
    }
    responses: {
      /** Unit-bed association entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient assignments endpoint to update an existing patient assignment. */
  updatePatientAssignment: {
    parameters: {
      body: {
        /** The patient assignment entity to update. */
        'patient-assignment'?: definitions['PatientAssignment']
      }
    }
    responses: {
      /** Patient assignment entity updated. */
      200: {
        schema: definitions['PatientAssignment']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient assignments endpoint to create a new patient assignment. */
  createPatientAssignment: {
    parameters: {
      body: {
        /** The patient assignment entity to create. */
        'patient-assignment'?: definitions['PatientAssignment']
      }
    }
    responses: {
      /** Patient assignment entity created. */
      200: {
        schema: definitions['PatientAssignment']
      }
      /** Patient assignment entity already exists. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response. */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient assignments endpoint to return an existing patient assignment entity with the given ID. */
  getPatientAssignment: {
    parameters: {
      path: {
        /** The patient assignment ID. */
        id: number
      }
    }
    responses: {
      /** The existing patient assignment entity with the given ID. */
      200: {
        schema: definitions['PatientAssignment']
      }
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
  /** Patient assignments endpoint to delete an existing patient assignment entity with the given ID. */
  deletePatientAssignment: {
    parameters: {
      path: {
        /** The patient asisgnment ID. */
        id: number
      }
    }
    responses: {
      /** Patient assignment entity already deleted. */
      204: never
      400: responses['BadRequest']
      401: responses['Unauthorized']
      403: responses['Forbidden']
      404: responses['NotFound']
      500: responses['InternalServerError']
      501: responses['NotImplemented']
      504: responses['GatewayTimeout']
      /** generic error response */
      default: {
        schema: definitions['Error']
      }
    }
  }
}
